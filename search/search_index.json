{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Zack Gald","text":"<p>B.S.E. Robotics Engineering, Arizona State University (May 2026) Embedded Systems \u00b7 Motion Control \u00b7 PCB Design \u00b7 Autonomous Robotics</p> <p>I design and build reliable mechatronic systems\u2014from firmware and drivers to the electronics and mechanics that make them move. I thrive at the intersection of hardware, software, and control.</p>"},{"location":"#why-im-a-great-fit","title":"Why I\u2019m a Great Fit","text":"<p>I\u2019m a hands-on engineer who learns by building. From motor drivers and PCBs to camera-based feedback and full system integration, I take ideas from concept to prototype fast and clean.</p> <p>I\u2019m a great fit because I:</p> <ul> <li>Am a hard worker who takes ownership of challenges and sees them through  </li> <li>Learn quickly and adapt easily to new tools, systems, and technologies  </li> <li>Communicate clearly across teams and disciplines  </li> <li>Bring leadership and initiative to every project I\u2019m part of  </li> </ul>"},{"location":"#core-skills","title":"Core Skills","text":"Category Skills Embedded Systems C/C++, MicroPython, UART/SPI/I\u00b2C, interrupt-driven firmware Robotics &amp; Control ROS2, Gazebo, PID tuning, motion planning, actuator control Hardware Design PCB layout (OrCAD/Allegro), power distribution, signal routing Software Tools MATLAB, Git/GitHub, Linux, VSCode, MPLAB X Prototyping &amp; Debug Logic analyzer, oscilloscope, real-time data visualization"},{"location":"#what-im-looking-for","title":"What I\u2019m Looking For","text":"<p>I\u2019m seeking an engineering opportunity where I can:</p> <ul> <li>Contribute to autonomous robotics, motion systems, or embedded hardware projects  </li> <li>Apply my technical skills to design, build, and ship reliable systems  </li> <li>Continue to learn and grow, both as an engineer and as a person </li> <li>Help shape the future of the world through innovative technology  </li> </ul> \u201cInnovation happens when curiosity meets craftsmanship.\u201d"},{"location":"contact/","title":"Contact","text":"Contact Me Zack Gald <p>Engineering Student \u2014 Arizona State University</p> <p> Phone: 949-510-8811 </p> <p> Email: zack.gald@gmail.com </p> <p> LinkedIn:        linkedin.com/in/zack-gald-52a765253      </p> <p>     Thank you for visiting my portfolio! I\u2019m open to opportunities in     robotics, embedded systems, and autonomy development.   </p>"},{"location":"professional-history/","title":"Professional History","text":"<p>A blend of engineering precision, customer-facing leadership, and coaching\u2014moving from hands-on aerospace work into quality systems.</p> 2025 \u2013 Present Quality Engineer Co-Op \u2014 NMG Aerospace <ul> <li>Support manufacturing quality control and process validation (AS9100 environment).</li> <li>Run root-cause analysis and implement corrective actions for nonconforming parts.</li> <li>Partner with design/production to keep documentation and traceability tight.</li> </ul> RCCAQuality SystemsData AnalysisAS9100Cross-functional comms 2023 \u2013 2025 Server/Bartender \u2014 Kabuki Japanese Restaurant <ul> <li>Owned high-volume sections and bar service with consistent guest satisfaction.</li> <li>Trained new staff; coordinated with kitchen and host teams under pressure.</li> </ul> Customer ServiceTime ManagementTeam LeadershipComposure 2021 \u2013 2022 Engineering Technician \u2014 Parker Aerospace <ul> <li>Assembled, tested, and calibrated hydraulic/control components and test stands.</li> <li>Troubleshot instrumentation with engineers; documented performance data.</li> </ul> System TestingInstrumentationDocumentationElectro-Mechanical Integration 2019 \u2013 2020 High School Basketball Coach \u2014 Mission Viejo High School <ul> <li>Developed practice plans, fundamentals, and teamwork for JV athletes.</li> <li>Mentored players on discipline, accountability, and leadership.</li> </ul> MentorshipLeadershipCommunicationProgram Planning"},{"location":"professional-history/#summary","title":"Summary","text":"<p>Across aerospace, hospitality, and coaching, I\u2019ve built a toolkit that blends quality rigor, clear communication, and leadership under pressure\u2014the same mindset I bring to engineering teams and customer-facing work today.</p>"},{"location":"resume/","title":"My Resume","text":"<p>\ud83d\udc49 Download Resume (PDF)</p>"},{"location":"projects/","title":"\ud83d\udd27 Projects Overview","text":"<p>Welcome to my robotics project portfolio! Each project below represents a step in my growth as an engineer \u2014 combining embedded systems, mechanical design, and autonomous control. These hands-on builds strengthened my foundation in hardware\u2013software integration, system debugging, and real-world testing.</p>"},{"location":"projects/#summary-of-technical-skills","title":"\ud83e\udde0 Summary of Technical Skills","text":"<p>Embedded Systems: PIC18F, PSoC, ESP32, UART, SPI, I2C Hardware Design: Cadence Allegro, PCB Layout, Voltage Regulation, Motor Drivers Software &amp; Tools: MATLAB, MPLAB X, GitHub, VS Code, ROS2, Gazebo Control &amp; Robotics: Inverse Kinematics, Stepper Motor Control, Computer Vision Soft Skills: Team Leadership, Technical Writing, Project Management, Communication  </p> <p>\ud83d\ude80 \u201cHands-on design builds confidence \u2014 every system I build brings me closer to mastering robotics autonomy and embedded intelligence.\u201d</p>"},{"location":"projects/object-tracker/","title":"Object Tracker","text":"<p>   Demonstration of real-time object tracking and PID-based motor control. </p>"},{"location":"projects/object-tracker/#summary","title":"Summary","text":"<p>This project combines computer vision and embedded motor control to track a red object in real time using a camera and a microcontroller. The Python script identifies the target through HSV color segmentation and applies a PID controller to keep the target centered in the camera frame. Control commands are sent over UART to a C-based firmware, which adjusts two PWM outputs to drive the motors accordingly.</p>"},{"location":"projects/object-tracker/#how-it-works","title":"How It Works","text":""},{"location":"projects/object-tracker/#vision-control-python","title":"Vision &amp; Control (Python)","text":"<ul> <li>Uses OpenCV to capture frames and isolate red regions via HSV filtering and morphological cleaning.  </li> <li>Computes the centroid of the detected region and calculates pixel error relative to the frame center.  </li> <li>Applies a PID controller to generate a motor speed command based on proportional, integral, and derivative terms.  </li> <li>Implements anti-windup for integral accumulation and derivative smoothing (<code>d_error = 0.7 * last_d_error + 0.3 * d_error</code>).  </li> <li>Includes a \u201csearch sweep\u201d mode to oscillate the motors if no target is found.  </li> <li>Supports real-time gain tuning from the keyboard (<code>u</code> and <code>d</code> keys adjust Kp) and auto-tuning recommendations using oscillation periods.  </li> <li>Plots error, speed, and time using live Matplotlib threads for control tuning visualization. :contentReference[oaicite:0]{index=0}:contentReference[oaicite:1]{index=1}</li> </ul>"},{"location":"projects/object-tracker/#embedded-motor-control-c-firmware","title":"Embedded Motor Control (C Firmware)","text":"<ul> <li>Receives two UART bytes from the Python script \u2014 one for direction and one for speed.  </li> <li>Automatically handles mixed packet order (determines which byte is direction vs. speed).  </li> <li>Converts received speed into PWM periods (<code>Period = 4 * Clock_Speed / Motor_Speed</code>).  </li> <li>Writes complementary PWM signals to control left/right motor direction.  </li> <li>Displays live direction and speed on LCD for debugging. :contentReference[oaicite:2]{index=2}</li> </ul>"},{"location":"projects/object-tracker/#skills-i-gained","title":"Skills I Gained","text":"<ul> <li>PID Controls: Tuning Kp, Ki, and Kd for smooth target tracking and response stability.  </li> <li>Computer Vision: HSV segmentation, contour filtering, and centroid computation.  </li> <li>Serial Communication: Designing a UART protocol for reliable speed/direction transfer.  </li> <li>Embedded Systems: PWM generation, motor driver interfacing, and LCD data output.  </li> <li>Real-Time Plotting: Visualizing dynamic signals (error, speed, dt) for tuning feedback.  </li> <li>Debugging &amp; Integration: Synchronizing two control loops (vision and motion) over serial.</li> </ul>"},{"location":"projects/object-tracker/#technologies-used","title":"Technologies Used","text":"<p>Languages: Python, C Libraries: OpenCV, NumPy, Matplotlib, PySerial Hardware: Camera, Microcontroller (UART + Dual PWM), LCD module Concepts: Computer Vision \u00b7 Control Systems \u00b7 PID Tuning \u00b7 UART Communication</p>"},{"location":"projects/object-tracker/#download-the-code","title":"\ud83d\udd3d Download the Code","text":"<p>You can view or download the full source files directly from this repository:</p> <ul> <li>Python Vision Control \u2014 <code>camerafinalv7.py</code>{target=_blank}</li> <li>Embedded Firmware \u2014 <code>final456.c</code>{target=_blank}</li> </ul> <p>Next step: Integrate IMU feedback or object distance measurement for full closed-loop motion stabilization.</p>"},{"location":"projects/pick-and-place/","title":"Pick-and-Place","text":""},{"location":"projects/pick-and-place/#object-tracking-and-robotic-control","title":"Object Tracking and Robotic Control","text":"<p>This MATLAB program performs background subtraction and object localization for robotic vision control. After initializing a USB camera, the code captures a static background image and then detects any new object placed in the field of view. By subtracting the new frame from the background and applying a binary threshold, it isolates the object\u2019s foreground pixels.</p> <p>Using matrix operations, the script calculates the object\u2019s centroid in pixel coordinates and converts it into real-world millimeter coordinates through calibration factors. A homogeneous transformation matrix aligns the camera frame to the robot\u2019s base frame, giving precise X and Y coordinates for control.</p> <p>Finally, the script establishes a UART serial connection to a PSoC microcontroller, transmitting the computed position data for real-time robotic movement. The code concludes with a loop that continuously sends the position variables until the connection is cleared, enabling synchronized motion between the MATLAB vision system and the robot\u2019s actuators.</p>"},{"location":"projects/pick-and-place/#skills-used","title":"\ud83e\udde0 Skills Used","text":"MATLAB Programming         Computer Vision         Coordinate Transformations         UART Communication         Robotics Integration"},{"location":"projects/pick-and-place/#demonstration-video","title":"\ud83c\udfa5 Demonstration Video","text":"<p>You can also download it here.</p>"},{"location":"projects/string-machine/","title":"String Machine","text":"<p>\ud83c\udfa5 Watch Demonstration of commucation over UART </p>"},{"location":"projects/string-machine/#summary","title":"Summary","text":"<p>The String Machine is an interactive K\u20138 educational exhibit that visualizes sound frequency using a vibrating string driven by a NEMA-17 stepper motor. It demonstrates how frequency, wavelength, and pitch relate \u2014 transforming invisible sound waves into a visible physical medium.  </p> <p>This system integrates embedded motor control, SPI communication, and firmware-level motion commands to create precise harmonic vibrations corresponding to musical notes.</p>"},{"location":"projects/string-machine/#system-overview","title":"System Overview","text":"Component Description Microcontroller PIC18F46Q10 \u2014 orchestrates SPI communication and timing control Motor Driver Trinamic TMC5072 \u2014 dual stepper driver with microstepping and velocity mode Motor NEMA-17 stepper \u2014 physically vibrates the string Power Supply 9 V barrel-jack through onboard regulators (3.3 V logic) Interface UART daisy-chain for control messages and parameter feedback PCB Custom-designed in OrCAD/Allegro with bypass capacitors and labeled connectors"},{"location":"projects/string-machine/#visuals","title":"Visuals","text":""},{"location":"projects/string-machine/#pcb-layout","title":"PCB Layout","text":"<p>{ width=\"650\" loading=lazy } Custom PCB designed in Allegro with labeled connectors for the motor, decoupling capacitors, and clean trace routing.</p>"},{"location":"projects/string-machine/#physical-prototype-concept","title":"Physical Prototype Concept","text":"<p>{ width=\"650\" loading=lazy } Early mock-up showing the string-motor assembly and optical viewing setup for visible standing waves.</p>"},{"location":"projects/string-machine/#how-it-works","title":"How It Works","text":"<ol> <li> <p>Frequency Command Input    A user selects or sends a desired pitch frequency via UART.</p> </li> <li> <p>Microcontroller Processing    The PIC18F46Q10 receives the command, converts it to a velocity value, and sends it through SPI to the TMC5072.</p> </li> <li> <p>Motor Actuation    The TMC5072 outputs precisely timed step pulses to the NEMA-17 motor, producing a standing wave on the string.</p> </li> <li> <p>Visual Feedback    A fixed laser line or LED light across the string reveals stationary wave patterns proportional to the drive frequency.</p> </li> <li> <p>Interactive Operation    Multiple modes \u2014 constant frequency, sweep, or random note selection \u2014 let students visualize pitch and wavelength.</p> </li> </ol>"},{"location":"projects/string-machine/#skills-i-gained","title":"Skills I Gained","text":"<ul> <li>Embedded SPI communication with a multi-axis stepper driver (TMC5072).  </li> <li>PCB design with proper decoupling, annular ring sizing, and signal routing.  </li> <li>Stepper motion control theory \u2014 microstepping, waveform synthesis, and vibration frequency mapping.  </li> <li>UART daisy-chain protocol design for sending and receiving frequency/speed data.  </li> <li>Firmware integration between motion IC, MCU, and user interface.  </li> <li>System-level debugging (oscilloscope signal verification, SPI timing, and logic analysis).  </li> </ul>"}]}